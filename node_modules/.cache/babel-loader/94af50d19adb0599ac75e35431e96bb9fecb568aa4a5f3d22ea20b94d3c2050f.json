{"ast":null,"code":"/**\n *\n * @param {Error} error\n */\nfunction parseErrorToStacks(error) {\n  if (!error || !(error instanceof Error)) {\n    throw new Error(\"parseErrorToStacks expects Error object\");\n  }\n\n  if (typeof error.stack === \"string\") {\n    return error.stack.split(\"\\n\").filter(function (stack) {\n      return stack !== \"Error: \".concat(error.message);\n    });\n  }\n}\n/**\n * @callback ErrorCallback\n * @param {ErrorEvent} error\n * @returns {void}\n */\n\n/**\n * @param {ErrorCallback} callback\n */\n\n\nfunction listenToRuntimeError(callback) {\n  window.addEventListener(\"error\", callback);\n  return function cleanup() {\n    window.removeEventListener(\"error\", callback);\n  };\n}\n\nexport { listenToRuntimeError, parseErrorToStacks };","map":{"version":3,"sources":["/Users/tammychiu/CSCI39548/my-bank-of-react/node_modules/webpack-dev-server/client/overlay/runtime-error.js"],"names":["parseErrorToStacks","error","Error","stack","split","filter","concat","message","listenToRuntimeError","callback","window","addEventListener","cleanup","removeEventListener"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,kBAAT,CAA4BC,KAA5B,EAAmC;AACjC,MAAI,CAACA,KAAD,IAAU,EAAEA,KAAK,YAAYC,KAAnB,CAAd,EAAyC;AACvC,UAAM,IAAIA,KAAJ,CAAU,yCAAV,CAAN;AACD;;AACD,MAAI,OAAOD,KAAK,CAACE,KAAb,KAAuB,QAA3B,EAAqC;AACnC,WAAOF,KAAK,CAACE,KAAN,CAAYC,KAAZ,CAAkB,IAAlB,EAAwBC,MAAxB,CAA+B,UAAUF,KAAV,EAAiB;AACrD,aAAOA,KAAK,KAAK,UAAUG,MAAV,CAAiBL,KAAK,CAACM,OAAvB,CAAjB;AACD,KAFM,CAAP;AAGD;AACF;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AACA,SAASC,oBAAT,CAA8BC,QAA9B,EAAwC;AACtCC,EAAAA,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiCF,QAAjC;AACA,SAAO,SAASG,OAAT,GAAmB;AACxBF,IAAAA,MAAM,CAACG,mBAAP,CAA2B,OAA3B,EAAoCJ,QAApC;AACD,GAFD;AAGD;;AACD,SAASD,oBAAT,EAA+BR,kBAA/B","sourcesContent":["/**\n *\n * @param {Error} error\n */\nfunction parseErrorToStacks(error) {\n  if (!error || !(error instanceof Error)) {\n    throw new Error(\"parseErrorToStacks expects Error object\");\n  }\n  if (typeof error.stack === \"string\") {\n    return error.stack.split(\"\\n\").filter(function (stack) {\n      return stack !== \"Error: \".concat(error.message);\n    });\n  }\n}\n\n/**\n * @callback ErrorCallback\n * @param {ErrorEvent} error\n * @returns {void}\n */\n\n/**\n * @param {ErrorCallback} callback\n */\nfunction listenToRuntimeError(callback) {\n  window.addEventListener(\"error\", callback);\n  return function cleanup() {\n    window.removeEventListener(\"error\", callback);\n  };\n}\nexport { listenToRuntimeError, parseErrorToStacks };"]},"metadata":{},"sourceType":"module","externalDependencies":[]}